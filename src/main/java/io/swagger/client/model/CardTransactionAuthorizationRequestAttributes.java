/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CardVerificationData;
import io.swagger.client.model.Merchant;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * CardTransactionAuthorizationRequestAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class CardTransactionAuthorizationRequestAttributes {
  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("partialApprovalAllowed")
  private Boolean partialApprovalAllowed = null;

  @SerializedName("approvedAmount")
  private Integer approvedAmount = null;

  @SerializedName("declineReason")
  private String declineReason = null;

  @SerializedName("merchant")
  private Merchant merchant = null;

  @SerializedName("recurring")
  private Boolean recurring = null;

  @SerializedName("tags")
  private Tags tags = null;

  @SerializedName("paymentMethod")
  private String paymentMethod = null;

  @SerializedName("digitalWallet")
  private String digitalWallet = null;

  @SerializedName("cardVerificationData")
  private CardVerificationData cardVerificationData = null;

  @SerializedName("cardNetwork")
  private String cardNetwork = null;

  public CardTransactionAuthorizationRequestAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public CardTransactionAuthorizationRequestAttributes amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public CardTransactionAuthorizationRequestAttributes status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public CardTransactionAuthorizationRequestAttributes partialApprovalAllowed(Boolean partialApprovalAllowed) {
    this.partialApprovalAllowed = partialApprovalAllowed;
    return this;
  }

   /**
   * Get partialApprovalAllowed
   * @return partialApprovalAllowed
  **/
  @Schema(required = true, description = "")
  public Boolean isPartialApprovalAllowed() {
    return partialApprovalAllowed;
  }

  public void setPartialApprovalAllowed(Boolean partialApprovalAllowed) {
    this.partialApprovalAllowed = partialApprovalAllowed;
  }

  public CardTransactionAuthorizationRequestAttributes approvedAmount(Integer approvedAmount) {
    this.approvedAmount = approvedAmount;
    return this;
  }

   /**
   * Get approvedAmount
   * @return approvedAmount
  **/
  @Schema(description = "")
  public Integer getApprovedAmount() {
    return approvedAmount;
  }

  public void setApprovedAmount(Integer approvedAmount) {
    this.approvedAmount = approvedAmount;
  }

  public CardTransactionAuthorizationRequestAttributes declineReason(String declineReason) {
    this.declineReason = declineReason;
    return this;
  }

   /**
   * Get declineReason
   * @return declineReason
  **/
  @Schema(description = "")
  public String getDeclineReason() {
    return declineReason;
  }

  public void setDeclineReason(String declineReason) {
    this.declineReason = declineReason;
  }

  public CardTransactionAuthorizationRequestAttributes merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @Schema(required = true, description = "")
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }

  public CardTransactionAuthorizationRequestAttributes recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @Schema(required = true, description = "")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

  public CardTransactionAuthorizationRequestAttributes tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public Tags getTags() {
    return tags;
  }

  public void setTags(Tags tags) {
    this.tags = tags;
  }

  public CardTransactionAuthorizationRequestAttributes paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @Schema(description = "")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public CardTransactionAuthorizationRequestAttributes digitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

   /**
   * Get digitalWallet
   * @return digitalWallet
  **/
  @Schema(description = "")
  public String getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
  }

  public CardTransactionAuthorizationRequestAttributes cardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
    return this;
  }

   /**
   * Get cardVerificationData
   * @return cardVerificationData
  **/
  @Schema(description = "")
  public CardVerificationData getCardVerificationData() {
    return cardVerificationData;
  }

  public void setCardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
  }

  public CardTransactionAuthorizationRequestAttributes cardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @Schema(description = "")
  public String getCardNetwork() {
    return cardNetwork;
  }

  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransactionAuthorizationRequestAttributes cardTransactionAuthorizationRequestAttributes = (CardTransactionAuthorizationRequestAttributes) o;
    return Objects.equals(this.createdAt, cardTransactionAuthorizationRequestAttributes.createdAt) &&
        Objects.equals(this.amount, cardTransactionAuthorizationRequestAttributes.amount) &&
        Objects.equals(this.status, cardTransactionAuthorizationRequestAttributes.status) &&
        Objects.equals(this.partialApprovalAllowed, cardTransactionAuthorizationRequestAttributes.partialApprovalAllowed) &&
        Objects.equals(this.approvedAmount, cardTransactionAuthorizationRequestAttributes.approvedAmount) &&
        Objects.equals(this.declineReason, cardTransactionAuthorizationRequestAttributes.declineReason) &&
        Objects.equals(this.merchant, cardTransactionAuthorizationRequestAttributes.merchant) &&
        Objects.equals(this.recurring, cardTransactionAuthorizationRequestAttributes.recurring) &&
        Objects.equals(this.tags, cardTransactionAuthorizationRequestAttributes.tags) &&
        Objects.equals(this.paymentMethod, cardTransactionAuthorizationRequestAttributes.paymentMethod) &&
        Objects.equals(this.digitalWallet, cardTransactionAuthorizationRequestAttributes.digitalWallet) &&
        Objects.equals(this.cardVerificationData, cardTransactionAuthorizationRequestAttributes.cardVerificationData) &&
        Objects.equals(this.cardNetwork, cardTransactionAuthorizationRequestAttributes.cardNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, amount, status, partialApprovalAllowed, approvedAmount, declineReason, merchant, recurring, tags, paymentMethod, digitalWallet, cardVerificationData, cardNetwork);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransactionAuthorizationRequestAttributes {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    partialApprovalAllowed: ").append(toIndentedString(partialApprovalAllowed)).append("\n");
    sb.append("    approvedAmount: ").append(toIndentedString(approvedAmount)).append("\n");
    sb.append("    declineReason: ").append(toIndentedString(declineReason)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    cardVerificationData: ").append(toIndentedString(cardVerificationData)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
