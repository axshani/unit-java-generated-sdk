/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CustomersRelationship;
import io.swagger.client.model.RelatedTransaction;
import io.swagger.client.model.Relationships17Account;
import io.swagger.client.model.Relationships17Reward;
import io.swagger.client.model.Relationships2Customer;
import io.swagger.client.model.Relationships4Account;
import io.swagger.client.model.Relationships5Customer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Relationships17
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class Relationships17 {
  @SerializedName("account")
  private Relationships17Account account = null;

  @SerializedName("receivingAccount")
  private Relationships4Account receivingAccount = null;

  @SerializedName("customer")
  private Relationships5Customer customer = null;

  @SerializedName("customers")
  private CustomersRelationship customers = null;

  @SerializedName("counterpartyAccount")
  private Relationships2Customer counterpartyAccount = null;

  @SerializedName("counterpartyCustomer")
  private Relationships2Customer counterpartyCustomer = null;

  @SerializedName("relatedTransaction")
  private Relationships2Customer relatedTransaction = null;

  @SerializedName("disputedTransaction")
  private RelatedTransaction disputedTransaction = null;

  @SerializedName("authorization")
  private Relationships2Customer authorization = null;

  @SerializedName("returned")
  private Relationships2Customer returned = null;

  @SerializedName("payment")
  private Relationships2Customer payment = null;

  @SerializedName("checkPayment")
  private Relationships2Customer checkPayment = null;

  @SerializedName("repayment")
  private Relationships2Customer repayment = null;

  @SerializedName("recurringPayment")
  private Relationships2Customer recurringPayment = null;

  @SerializedName("org")
  private Relationships2Customer org = null;

  @SerializedName("card")
  private Relationships2Customer card = null;

  @SerializedName("incomingAch")
  private Relationships2Customer incomingAch = null;

  @SerializedName("checkDeposit")
  private Relationships2Customer checkDeposit = null;

  @SerializedName("authorizationRequest")
  private Relationships2Customer authorizationRequest = null;

  @SerializedName("paymentAdvanceTransaction")
  private RelatedTransaction paymentAdvanceTransaction = null;

  @SerializedName("receivedPayment")
  private Relationships2Customer receivedPayment = null;

  @SerializedName("chargeback")
  private Relationships2Customer chargeback = null;

  @SerializedName("reward")
  private Relationships17Reward reward = null;

  public Relationships17 account(Relationships17Account account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @Schema(required = true, description = "")
  public Relationships17Account getAccount() {
    return account;
  }

  public void setAccount(Relationships17Account account) {
    this.account = account;
  }

  public Relationships17 receivingAccount(Relationships4Account receivingAccount) {
    this.receivingAccount = receivingAccount;
    return this;
  }

   /**
   * Get receivingAccount
   * @return receivingAccount
  **/
  @Schema(description = "")
  public Relationships4Account getReceivingAccount() {
    return receivingAccount;
  }

  public void setReceivingAccount(Relationships4Account receivingAccount) {
    this.receivingAccount = receivingAccount;
  }

  public Relationships17 customer(Relationships5Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @Schema(description = "")
  public Relationships5Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Relationships5Customer customer) {
    this.customer = customer;
  }

  public Relationships17 customers(CustomersRelationship customers) {
    this.customers = customers;
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @Schema(description = "")
  public CustomersRelationship getCustomers() {
    return customers;
  }

  public void setCustomers(CustomersRelationship customers) {
    this.customers = customers;
  }

  public Relationships17 counterpartyAccount(Relationships2Customer counterpartyAccount) {
    this.counterpartyAccount = counterpartyAccount;
    return this;
  }

   /**
   * Get counterpartyAccount
   * @return counterpartyAccount
  **/
  @Schema(description = "")
  public Relationships2Customer getCounterpartyAccount() {
    return counterpartyAccount;
  }

  public void setCounterpartyAccount(Relationships2Customer counterpartyAccount) {
    this.counterpartyAccount = counterpartyAccount;
  }

  public Relationships17 counterpartyCustomer(Relationships2Customer counterpartyCustomer) {
    this.counterpartyCustomer = counterpartyCustomer;
    return this;
  }

   /**
   * Get counterpartyCustomer
   * @return counterpartyCustomer
  **/
  @Schema(description = "")
  public Relationships2Customer getCounterpartyCustomer() {
    return counterpartyCustomer;
  }

  public void setCounterpartyCustomer(Relationships2Customer counterpartyCustomer) {
    this.counterpartyCustomer = counterpartyCustomer;
  }

  public Relationships17 relatedTransaction(Relationships2Customer relatedTransaction) {
    this.relatedTransaction = relatedTransaction;
    return this;
  }

   /**
   * Get relatedTransaction
   * @return relatedTransaction
  **/
  @Schema(description = "")
  public Relationships2Customer getRelatedTransaction() {
    return relatedTransaction;
  }

  public void setRelatedTransaction(Relationships2Customer relatedTransaction) {
    this.relatedTransaction = relatedTransaction;
  }

  public Relationships17 disputedTransaction(RelatedTransaction disputedTransaction) {
    this.disputedTransaction = disputedTransaction;
    return this;
  }

   /**
   * Get disputedTransaction
   * @return disputedTransaction
  **/
  @Schema(description = "")
  public RelatedTransaction getDisputedTransaction() {
    return disputedTransaction;
  }

  public void setDisputedTransaction(RelatedTransaction disputedTransaction) {
    this.disputedTransaction = disputedTransaction;
  }

  public Relationships17 authorization(Relationships2Customer authorization) {
    this.authorization = authorization;
    return this;
  }

   /**
   * Get authorization
   * @return authorization
  **/
  @Schema(description = "")
  public Relationships2Customer getAuthorization() {
    return authorization;
  }

  public void setAuthorization(Relationships2Customer authorization) {
    this.authorization = authorization;
  }

  public Relationships17 returned(Relationships2Customer returned) {
    this.returned = returned;
    return this;
  }

   /**
   * Get returned
   * @return returned
  **/
  @Schema(description = "")
  public Relationships2Customer getReturned() {
    return returned;
  }

  public void setReturned(Relationships2Customer returned) {
    this.returned = returned;
  }

  public Relationships17 payment(Relationships2Customer payment) {
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @Schema(description = "")
  public Relationships2Customer getPayment() {
    return payment;
  }

  public void setPayment(Relationships2Customer payment) {
    this.payment = payment;
  }

  public Relationships17 checkPayment(Relationships2Customer checkPayment) {
    this.checkPayment = checkPayment;
    return this;
  }

   /**
   * Get checkPayment
   * @return checkPayment
  **/
  @Schema(description = "")
  public Relationships2Customer getCheckPayment() {
    return checkPayment;
  }

  public void setCheckPayment(Relationships2Customer checkPayment) {
    this.checkPayment = checkPayment;
  }

  public Relationships17 repayment(Relationships2Customer repayment) {
    this.repayment = repayment;
    return this;
  }

   /**
   * Get repayment
   * @return repayment
  **/
  @Schema(description = "")
  public Relationships2Customer getRepayment() {
    return repayment;
  }

  public void setRepayment(Relationships2Customer repayment) {
    this.repayment = repayment;
  }

  public Relationships17 recurringPayment(Relationships2Customer recurringPayment) {
    this.recurringPayment = recurringPayment;
    return this;
  }

   /**
   * Get recurringPayment
   * @return recurringPayment
  **/
  @Schema(description = "")
  public Relationships2Customer getRecurringPayment() {
    return recurringPayment;
  }

  public void setRecurringPayment(Relationships2Customer recurringPayment) {
    this.recurringPayment = recurringPayment;
  }

  public Relationships17 org(Relationships2Customer org) {
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @Schema(description = "")
  public Relationships2Customer getOrg() {
    return org;
  }

  public void setOrg(Relationships2Customer org) {
    this.org = org;
  }

  public Relationships17 card(Relationships2Customer card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @Schema(description = "")
  public Relationships2Customer getCard() {
    return card;
  }

  public void setCard(Relationships2Customer card) {
    this.card = card;
  }

  public Relationships17 incomingAch(Relationships2Customer incomingAch) {
    this.incomingAch = incomingAch;
    return this;
  }

   /**
   * Get incomingAch
   * @return incomingAch
  **/
  @Schema(description = "")
  public Relationships2Customer getIncomingAch() {
    return incomingAch;
  }

  public void setIncomingAch(Relationships2Customer incomingAch) {
    this.incomingAch = incomingAch;
  }

  public Relationships17 checkDeposit(Relationships2Customer checkDeposit) {
    this.checkDeposit = checkDeposit;
    return this;
  }

   /**
   * Get checkDeposit
   * @return checkDeposit
  **/
  @Schema(description = "")
  public Relationships2Customer getCheckDeposit() {
    return checkDeposit;
  }

  public void setCheckDeposit(Relationships2Customer checkDeposit) {
    this.checkDeposit = checkDeposit;
  }

  public Relationships17 authorizationRequest(Relationships2Customer authorizationRequest) {
    this.authorizationRequest = authorizationRequest;
    return this;
  }

   /**
   * Get authorizationRequest
   * @return authorizationRequest
  **/
  @Schema(description = "")
  public Relationships2Customer getAuthorizationRequest() {
    return authorizationRequest;
  }

  public void setAuthorizationRequest(Relationships2Customer authorizationRequest) {
    this.authorizationRequest = authorizationRequest;
  }

  public Relationships17 paymentAdvanceTransaction(RelatedTransaction paymentAdvanceTransaction) {
    this.paymentAdvanceTransaction = paymentAdvanceTransaction;
    return this;
  }

   /**
   * Get paymentAdvanceTransaction
   * @return paymentAdvanceTransaction
  **/
  @Schema(description = "")
  public RelatedTransaction getPaymentAdvanceTransaction() {
    return paymentAdvanceTransaction;
  }

  public void setPaymentAdvanceTransaction(RelatedTransaction paymentAdvanceTransaction) {
    this.paymentAdvanceTransaction = paymentAdvanceTransaction;
  }

  public Relationships17 receivedPayment(Relationships2Customer receivedPayment) {
    this.receivedPayment = receivedPayment;
    return this;
  }

   /**
   * Get receivedPayment
   * @return receivedPayment
  **/
  @Schema(description = "")
  public Relationships2Customer getReceivedPayment() {
    return receivedPayment;
  }

  public void setReceivedPayment(Relationships2Customer receivedPayment) {
    this.receivedPayment = receivedPayment;
  }

  public Relationships17 chargeback(Relationships2Customer chargeback) {
    this.chargeback = chargeback;
    return this;
  }

   /**
   * Get chargeback
   * @return chargeback
  **/
  @Schema(description = "")
  public Relationships2Customer getChargeback() {
    return chargeback;
  }

  public void setChargeback(Relationships2Customer chargeback) {
    this.chargeback = chargeback;
  }

  public Relationships17 reward(Relationships17Reward reward) {
    this.reward = reward;
    return this;
  }

   /**
   * Get reward
   * @return reward
  **/
  @Schema(description = "")
  public Relationships17Reward getReward() {
    return reward;
  }

  public void setReward(Relationships17Reward reward) {
    this.reward = reward;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships17 relationships17 = (Relationships17) o;
    return Objects.equals(this.account, relationships17.account) &&
        Objects.equals(this.receivingAccount, relationships17.receivingAccount) &&
        Objects.equals(this.customer, relationships17.customer) &&
        Objects.equals(this.customers, relationships17.customers) &&
        Objects.equals(this.counterpartyAccount, relationships17.counterpartyAccount) &&
        Objects.equals(this.counterpartyCustomer, relationships17.counterpartyCustomer) &&
        Objects.equals(this.relatedTransaction, relationships17.relatedTransaction) &&
        Objects.equals(this.disputedTransaction, relationships17.disputedTransaction) &&
        Objects.equals(this.authorization, relationships17.authorization) &&
        Objects.equals(this.returned, relationships17.returned) &&
        Objects.equals(this.payment, relationships17.payment) &&
        Objects.equals(this.checkPayment, relationships17.checkPayment) &&
        Objects.equals(this.repayment, relationships17.repayment) &&
        Objects.equals(this.recurringPayment, relationships17.recurringPayment) &&
        Objects.equals(this.org, relationships17.org) &&
        Objects.equals(this.card, relationships17.card) &&
        Objects.equals(this.incomingAch, relationships17.incomingAch) &&
        Objects.equals(this.checkDeposit, relationships17.checkDeposit) &&
        Objects.equals(this.authorizationRequest, relationships17.authorizationRequest) &&
        Objects.equals(this.paymentAdvanceTransaction, relationships17.paymentAdvanceTransaction) &&
        Objects.equals(this.receivedPayment, relationships17.receivedPayment) &&
        Objects.equals(this.chargeback, relationships17.chargeback) &&
        Objects.equals(this.reward, relationships17.reward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, receivingAccount, customer, customers, counterpartyAccount, counterpartyCustomer, relatedTransaction, disputedTransaction, authorization, returned, payment, checkPayment, repayment, recurringPayment, org, card, incomingAch, checkDeposit, authorizationRequest, paymentAdvanceTransaction, receivedPayment, chargeback, reward);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships17 {\n");
    
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    receivingAccount: ").append(toIndentedString(receivingAccount)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    counterpartyAccount: ").append(toIndentedString(counterpartyAccount)).append("\n");
    sb.append("    counterpartyCustomer: ").append(toIndentedString(counterpartyCustomer)).append("\n");
    sb.append("    relatedTransaction: ").append(toIndentedString(relatedTransaction)).append("\n");
    sb.append("    disputedTransaction: ").append(toIndentedString(disputedTransaction)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    checkPayment: ").append(toIndentedString(checkPayment)).append("\n");
    sb.append("    repayment: ").append(toIndentedString(repayment)).append("\n");
    sb.append("    recurringPayment: ").append(toIndentedString(recurringPayment)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    incomingAch: ").append(toIndentedString(incomingAch)).append("\n");
    sb.append("    checkDeposit: ").append(toIndentedString(checkDeposit)).append("\n");
    sb.append("    authorizationRequest: ").append(toIndentedString(authorizationRequest)).append("\n");
    sb.append("    paymentAdvanceTransaction: ").append(toIndentedString(paymentAdvanceTransaction)).append("\n");
    sb.append("    receivedPayment: ").append(toIndentedString(receivedPayment)).append("\n");
    sb.append("    chargeback: ").append(toIndentedString(chargeback)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
