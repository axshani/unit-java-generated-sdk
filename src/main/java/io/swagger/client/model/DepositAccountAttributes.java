/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DepositAccountAttributesSecondaryAccountNumber;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DepositAccountAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class DepositAccountAttributes {
  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("depositProduct")
  private String depositProduct = null;

  @SerializedName("routingNumber")
  private String routingNumber = null;

  @SerializedName("accountNumber")
  private String accountNumber = null;

  @SerializedName("secondaryAccountNumber")
  private DepositAccountAttributesSecondaryAccountNumber secondaryAccountNumber = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("balance")
  private Integer balance = null;

  @SerializedName("overdraftLimit")
  private Integer overdraftLimit = null;

  @SerializedName("hold")
  private Integer hold = null;

  @SerializedName("available")
  private Integer available = null;

  @SerializedName("tags")
  private Tags tags = null;

  @SerializedName("status")
  private String status = null;

  /**
   * Gets or Sets closeReason
   */
  @JsonAdapter(CloseReasonEnum.Adapter.class)
  public enum CloseReasonEnum {
    BYCUSTOMER("ByCustomer"),
    FRAUD("Fraud");

    private String value;

    CloseReasonEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CloseReasonEnum fromValue(String input) {
      for (CloseReasonEnum b : CloseReasonEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CloseReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloseReasonEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CloseReasonEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CloseReasonEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("closeReason")
  private CloseReasonEnum closeReason = null;

  /**
   * Gets or Sets fraudReason
   */
  @JsonAdapter(FraudReasonEnum.Adapter.class)
  public enum FraudReasonEnum {
    ACHACTIVITY("ACHActivity"),
    CARDACTIVITY("CardActivity"),
    CHECKACTIVITY("CheckActivity"),
    APPLICATIONHISTORY("ApplicationHistory"),
    ACCOUNTACTIVITY("AccountActivity"),
    CLIENTIDENTIFIED("ClientIdentified"),
    IDENTITYTHEFT("IdentityTheft"),
    LINKEDTOFRAUDULENTCUSTOMER("LinkedToFraudulentCustomer");

    private String value;

    FraudReasonEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FraudReasonEnum fromValue(String input) {
      for (FraudReasonEnum b : FraudReasonEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FraudReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FraudReasonEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FraudReasonEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FraudReasonEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("fraudReason")
  private FraudReasonEnum fraudReason = null;

  @SerializedName("closeReasonText")
  private String closeReasonText = null;

  @SerializedName("freezeReason")
  private String freezeReason = null;

  @SerializedName("maskedAccountNumber")
  private String maskedAccountNumber = null;

  @SerializedName("isOverdrawnWithinLimit")
  private Boolean isOverdrawnWithinLimit = null;

  @SerializedName("dacaStatus")
  private String dacaStatus = null;

  @SerializedName("updatedAt")
  private OffsetDateTime updatedAt = null;

  public DepositAccountAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public DepositAccountAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DepositAccountAttributes depositProduct(String depositProduct) {
    this.depositProduct = depositProduct;
    return this;
  }

   /**
   * Get depositProduct
   * @return depositProduct
  **/
  @Schema(required = true, description = "")
  public String getDepositProduct() {
    return depositProduct;
  }

  public void setDepositProduct(String depositProduct) {
    this.depositProduct = depositProduct;
  }

  public DepositAccountAttributes routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Get routingNumber
   * @return routingNumber
  **/
  @Schema(required = true, description = "")
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }

  public DepositAccountAttributes accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @Schema(description = "")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public DepositAccountAttributes secondaryAccountNumber(DepositAccountAttributesSecondaryAccountNumber secondaryAccountNumber) {
    this.secondaryAccountNumber = secondaryAccountNumber;
    return this;
  }

   /**
   * Get secondaryAccountNumber
   * @return secondaryAccountNumber
  **/
  @Schema(description = "")
  public DepositAccountAttributesSecondaryAccountNumber getSecondaryAccountNumber() {
    return secondaryAccountNumber;
  }

  public void setSecondaryAccountNumber(DepositAccountAttributesSecondaryAccountNumber secondaryAccountNumber) {
    this.secondaryAccountNumber = secondaryAccountNumber;
  }

  public DepositAccountAttributes currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(required = true, description = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public DepositAccountAttributes balance(Integer balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @Schema(required = true, description = "")
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }

  public DepositAccountAttributes overdraftLimit(Integer overdraftLimit) {
    this.overdraftLimit = overdraftLimit;
    return this;
  }

   /**
   * Get overdraftLimit
   * minimum: 0
   * @return overdraftLimit
  **/
  @Schema(description = "")
  public Integer getOverdraftLimit() {
    return overdraftLimit;
  }

  public void setOverdraftLimit(Integer overdraftLimit) {
    this.overdraftLimit = overdraftLimit;
  }

  public DepositAccountAttributes hold(Integer hold) {
    this.hold = hold;
    return this;
  }

   /**
   * Get hold
   * @return hold
  **/
  @Schema(required = true, description = "")
  public Integer getHold() {
    return hold;
  }

  public void setHold(Integer hold) {
    this.hold = hold;
  }

  public DepositAccountAttributes available(Integer available) {
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @Schema(required = true, description = "")
  public Integer getAvailable() {
    return available;
  }

  public void setAvailable(Integer available) {
    this.available = available;
  }

  public DepositAccountAttributes tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(required = true, description = "")
  public Tags getTags() {
    return tags;
  }

  public void setTags(Tags tags) {
    this.tags = tags;
  }

  public DepositAccountAttributes status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DepositAccountAttributes closeReason(CloseReasonEnum closeReason) {
    this.closeReason = closeReason;
    return this;
  }

   /**
   * Get closeReason
   * @return closeReason
  **/
  @Schema(description = "")
  public CloseReasonEnum getCloseReason() {
    return closeReason;
  }

  public void setCloseReason(CloseReasonEnum closeReason) {
    this.closeReason = closeReason;
  }

  public DepositAccountAttributes fraudReason(FraudReasonEnum fraudReason) {
    this.fraudReason = fraudReason;
    return this;
  }

   /**
   * Get fraudReason
   * @return fraudReason
  **/
  @Schema(description = "")
  public FraudReasonEnum getFraudReason() {
    return fraudReason;
  }

  public void setFraudReason(FraudReasonEnum fraudReason) {
    this.fraudReason = fraudReason;
  }

  public DepositAccountAttributes closeReasonText(String closeReasonText) {
    this.closeReasonText = closeReasonText;
    return this;
  }

   /**
   * Get closeReasonText
   * @return closeReasonText
  **/
  @Schema(description = "")
  public String getCloseReasonText() {
    return closeReasonText;
  }

  public void setCloseReasonText(String closeReasonText) {
    this.closeReasonText = closeReasonText;
  }

  public DepositAccountAttributes freezeReason(String freezeReason) {
    this.freezeReason = freezeReason;
    return this;
  }

   /**
   * Get freezeReason
   * @return freezeReason
  **/
  @Schema(description = "")
  public String getFreezeReason() {
    return freezeReason;
  }

  public void setFreezeReason(String freezeReason) {
    this.freezeReason = freezeReason;
  }

  public DepositAccountAttributes maskedAccountNumber(String maskedAccountNumber) {
    this.maskedAccountNumber = maskedAccountNumber;
    return this;
  }

   /**
   * Get maskedAccountNumber
   * @return maskedAccountNumber
  **/
  @Schema(description = "")
  public String getMaskedAccountNumber() {
    return maskedAccountNumber;
  }

  public void setMaskedAccountNumber(String maskedAccountNumber) {
    this.maskedAccountNumber = maskedAccountNumber;
  }

  public DepositAccountAttributes isOverdrawnWithinLimit(Boolean isOverdrawnWithinLimit) {
    this.isOverdrawnWithinLimit = isOverdrawnWithinLimit;
    return this;
  }

   /**
   * Get isOverdrawnWithinLimit
   * @return isOverdrawnWithinLimit
  **/
  @Schema(description = "")
  public Boolean isIsOverdrawnWithinLimit() {
    return isOverdrawnWithinLimit;
  }

  public void setIsOverdrawnWithinLimit(Boolean isOverdrawnWithinLimit) {
    this.isOverdrawnWithinLimit = isOverdrawnWithinLimit;
  }

  public DepositAccountAttributes dacaStatus(String dacaStatus) {
    this.dacaStatus = dacaStatus;
    return this;
  }

   /**
   * Get dacaStatus
   * @return dacaStatus
  **/
  @Schema(description = "")
  public String getDacaStatus() {
    return dacaStatus;
  }

  public void setDacaStatus(String dacaStatus) {
    this.dacaStatus = dacaStatus;
  }

  public DepositAccountAttributes updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositAccountAttributes depositAccountAttributes = (DepositAccountAttributes) o;
    return Objects.equals(this.createdAt, depositAccountAttributes.createdAt) &&
        Objects.equals(this.name, depositAccountAttributes.name) &&
        Objects.equals(this.depositProduct, depositAccountAttributes.depositProduct) &&
        Objects.equals(this.routingNumber, depositAccountAttributes.routingNumber) &&
        Objects.equals(this.accountNumber, depositAccountAttributes.accountNumber) &&
        Objects.equals(this.secondaryAccountNumber, depositAccountAttributes.secondaryAccountNumber) &&
        Objects.equals(this.currency, depositAccountAttributes.currency) &&
        Objects.equals(this.balance, depositAccountAttributes.balance) &&
        Objects.equals(this.overdraftLimit, depositAccountAttributes.overdraftLimit) &&
        Objects.equals(this.hold, depositAccountAttributes.hold) &&
        Objects.equals(this.available, depositAccountAttributes.available) &&
        Objects.equals(this.tags, depositAccountAttributes.tags) &&
        Objects.equals(this.status, depositAccountAttributes.status) &&
        Objects.equals(this.closeReason, depositAccountAttributes.closeReason) &&
        Objects.equals(this.fraudReason, depositAccountAttributes.fraudReason) &&
        Objects.equals(this.closeReasonText, depositAccountAttributes.closeReasonText) &&
        Objects.equals(this.freezeReason, depositAccountAttributes.freezeReason) &&
        Objects.equals(this.maskedAccountNumber, depositAccountAttributes.maskedAccountNumber) &&
        Objects.equals(this.isOverdrawnWithinLimit, depositAccountAttributes.isOverdrawnWithinLimit) &&
        Objects.equals(this.dacaStatus, depositAccountAttributes.dacaStatus) &&
        Objects.equals(this.updatedAt, depositAccountAttributes.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, name, depositProduct, routingNumber, accountNumber, secondaryAccountNumber, currency, balance, overdraftLimit, hold, available, tags, status, closeReason, fraudReason, closeReasonText, freezeReason, maskedAccountNumber, isOverdrawnWithinLimit, dacaStatus, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositAccountAttributes {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    depositProduct: ").append(toIndentedString(depositProduct)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    secondaryAccountNumber: ").append(toIndentedString(secondaryAccountNumber)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    overdraftLimit: ").append(toIndentedString(overdraftLimit)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    closeReason: ").append(toIndentedString(closeReason)).append("\n");
    sb.append("    fraudReason: ").append(toIndentedString(fraudReason)).append("\n");
    sb.append("    closeReasonText: ").append(toIndentedString(closeReasonText)).append("\n");
    sb.append("    freezeReason: ").append(toIndentedString(freezeReason)).append("\n");
    sb.append("    maskedAccountNumber: ").append(toIndentedString(maskedAccountNumber)).append("\n");
    sb.append("    isOverdrawnWithinLimit: ").append(toIndentedString(isOverdrawnWithinLimit)).append("\n");
    sb.append("    dacaStatus: ").append(toIndentedString(dacaStatus)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
