/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * AtmTransactionAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class AtmTransactionAttributes {
  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("Credit"),
    DEBIT("Debit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String input) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DirectionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("balance")
  private Integer balance = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("cardLast4Digits")
  private String cardLast4Digits = null;

  @SerializedName("atmName")
  private String atmName = null;

  @SerializedName("atmLocation")
  private String atmLocation = null;

  @SerializedName("surcharge")
  private Integer surcharge = null;

  @SerializedName("tags")
  private Tags tags = null;

  @SerializedName("networkTransactionId")
  private String networkTransactionId = null;

  @SerializedName("interchange")
  private OneOfAtmTransactionAttributesInterchange interchange = null;

  @SerializedName("internationalServiceFee")
  private OneOfAtmTransactionAttributesInternationalServiceFee internationalServiceFee = null;

  @SerializedName("cardNetwork")
  private String cardNetwork = null;

  public AtmTransactionAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public AtmTransactionAttributes direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @Schema(required = true, description = "")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public AtmTransactionAttributes amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public AtmTransactionAttributes balance(Integer balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @Schema(required = true, description = "")
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }

  public AtmTransactionAttributes summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(required = true, description = "")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public AtmTransactionAttributes cardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
    return this;
  }

   /**
   * Get cardLast4Digits
   * @return cardLast4Digits
  **/
  @Schema(required = true, description = "")
  public String getCardLast4Digits() {
    return cardLast4Digits;
  }

  public void setCardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
  }

  public AtmTransactionAttributes atmName(String atmName) {
    this.atmName = atmName;
    return this;
  }

   /**
   * Get atmName
   * @return atmName
  **/
  @Schema(required = true, description = "")
  public String getAtmName() {
    return atmName;
  }

  public void setAtmName(String atmName) {
    this.atmName = atmName;
  }

  public AtmTransactionAttributes atmLocation(String atmLocation) {
    this.atmLocation = atmLocation;
    return this;
  }

   /**
   * Get atmLocation
   * @return atmLocation
  **/
  @Schema(description = "")
  public String getAtmLocation() {
    return atmLocation;
  }

  public void setAtmLocation(String atmLocation) {
    this.atmLocation = atmLocation;
  }

  public AtmTransactionAttributes surcharge(Integer surcharge) {
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @Schema(required = true, description = "")
  public Integer getSurcharge() {
    return surcharge;
  }

  public void setSurcharge(Integer surcharge) {
    this.surcharge = surcharge;
  }

  public AtmTransactionAttributes tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public Tags getTags() {
    return tags;
  }

  public void setTags(Tags tags) {
    this.tags = tags;
  }

  public AtmTransactionAttributes networkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Get networkTransactionId
   * @return networkTransactionId
  **/
  @Schema(description = "")
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }

  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }

  public AtmTransactionAttributes interchange(OneOfAtmTransactionAttributesInterchange interchange) {
    this.interchange = interchange;
    return this;
  }

   /**
   * Get interchange
   * @return interchange
  **/
  @Schema(description = "")
  public OneOfAtmTransactionAttributesInterchange getInterchange() {
    return interchange;
  }

  public void setInterchange(OneOfAtmTransactionAttributesInterchange interchange) {
    this.interchange = interchange;
  }

  public AtmTransactionAttributes internationalServiceFee(OneOfAtmTransactionAttributesInternationalServiceFee internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
    return this;
  }

   /**
   * Get internationalServiceFee
   * @return internationalServiceFee
  **/
  @Schema(description = "")
  public OneOfAtmTransactionAttributesInternationalServiceFee getInternationalServiceFee() {
    return internationalServiceFee;
  }

  public void setInternationalServiceFee(OneOfAtmTransactionAttributesInternationalServiceFee internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
  }

  public AtmTransactionAttributes cardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @Schema(description = "")
  public String getCardNetwork() {
    return cardNetwork;
  }

  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AtmTransactionAttributes atmTransactionAttributes = (AtmTransactionAttributes) o;
    return Objects.equals(this.createdAt, atmTransactionAttributes.createdAt) &&
        Objects.equals(this.direction, atmTransactionAttributes.direction) &&
        Objects.equals(this.amount, atmTransactionAttributes.amount) &&
        Objects.equals(this.balance, atmTransactionAttributes.balance) &&
        Objects.equals(this.summary, atmTransactionAttributes.summary) &&
        Objects.equals(this.cardLast4Digits, atmTransactionAttributes.cardLast4Digits) &&
        Objects.equals(this.atmName, atmTransactionAttributes.atmName) &&
        Objects.equals(this.atmLocation, atmTransactionAttributes.atmLocation) &&
        Objects.equals(this.surcharge, atmTransactionAttributes.surcharge) &&
        Objects.equals(this.tags, atmTransactionAttributes.tags) &&
        Objects.equals(this.networkTransactionId, atmTransactionAttributes.networkTransactionId) &&
        Objects.equals(this.interchange, atmTransactionAttributes.interchange) &&
        Objects.equals(this.internationalServiceFee, atmTransactionAttributes.internationalServiceFee) &&
        Objects.equals(this.cardNetwork, atmTransactionAttributes.cardNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, direction, amount, balance, summary, cardLast4Digits, atmName, atmLocation, surcharge, tags, networkTransactionId, interchange, internationalServiceFee, cardNetwork);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AtmTransactionAttributes {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    cardLast4Digits: ").append(toIndentedString(cardLast4Digits)).append("\n");
    sb.append("    atmName: ").append(toIndentedString(atmName)).append("\n");
    sb.append("    atmLocation: ").append(toIndentedString(atmLocation)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    interchange: ").append(toIndentedString(interchange)).append("\n");
    sb.append("    internationalServiceFee: ").append(toIndentedString(internationalServiceFee)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
