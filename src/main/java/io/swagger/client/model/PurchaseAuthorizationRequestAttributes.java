/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CardVerificationData;
import io.swagger.client.model.HealthcareAmounts;
import io.swagger.client.model.Merchant;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * PurchaseAuthorizationRequestAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class PurchaseAuthorizationRequestAttributes {
  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("partialApprovalAllowed")
  private Boolean partialApprovalAllowed = null;

  @SerializedName("approvedAmount")
  private Integer approvedAmount = null;

  @SerializedName("declineReason")
  private String declineReason = null;

  @SerializedName("merchant")
  private Merchant merchant = null;

  @SerializedName("recurring")
  private Boolean recurring = null;

  @SerializedName("tags")
  private Tags tags = null;

  @SerializedName("healthcareAmounts")
  private HealthcareAmounts healthcareAmounts = null;

  @SerializedName("paymentMethod")
  private String paymentMethod = null;

  @SerializedName("digitalWallet")
  private String digitalWallet = null;

  @SerializedName("cardVerificationData")
  private CardVerificationData cardVerificationData = null;

  @SerializedName("ecommerce")
  private Boolean ecommerce = null;

  @SerializedName("cardPresent")
  private Boolean cardPresent = null;

  @SerializedName("cardNetwork")
  private String cardNetwork = null;

  @SerializedName("cashWithdrawalAmount")
  private Integer cashWithdrawalAmount = null;

  public PurchaseAuthorizationRequestAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public PurchaseAuthorizationRequestAttributes amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public PurchaseAuthorizationRequestAttributes status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public PurchaseAuthorizationRequestAttributes partialApprovalAllowed(Boolean partialApprovalAllowed) {
    this.partialApprovalAllowed = partialApprovalAllowed;
    return this;
  }

   /**
   * Get partialApprovalAllowed
   * @return partialApprovalAllowed
  **/
  @Schema(required = true, description = "")
  public Boolean isPartialApprovalAllowed() {
    return partialApprovalAllowed;
  }

  public void setPartialApprovalAllowed(Boolean partialApprovalAllowed) {
    this.partialApprovalAllowed = partialApprovalAllowed;
  }

  public PurchaseAuthorizationRequestAttributes approvedAmount(Integer approvedAmount) {
    this.approvedAmount = approvedAmount;
    return this;
  }

   /**
   * Get approvedAmount
   * @return approvedAmount
  **/
  @Schema(description = "")
  public Integer getApprovedAmount() {
    return approvedAmount;
  }

  public void setApprovedAmount(Integer approvedAmount) {
    this.approvedAmount = approvedAmount;
  }

  public PurchaseAuthorizationRequestAttributes declineReason(String declineReason) {
    this.declineReason = declineReason;
    return this;
  }

   /**
   * Get declineReason
   * @return declineReason
  **/
  @Schema(description = "")
  public String getDeclineReason() {
    return declineReason;
  }

  public void setDeclineReason(String declineReason) {
    this.declineReason = declineReason;
  }

  public PurchaseAuthorizationRequestAttributes merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @Schema(required = true, description = "")
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }

  public PurchaseAuthorizationRequestAttributes recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @Schema(required = true, description = "")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

  public PurchaseAuthorizationRequestAttributes tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public Tags getTags() {
    return tags;
  }

  public void setTags(Tags tags) {
    this.tags = tags;
  }

  public PurchaseAuthorizationRequestAttributes healthcareAmounts(HealthcareAmounts healthcareAmounts) {
    this.healthcareAmounts = healthcareAmounts;
    return this;
  }

   /**
   * Get healthcareAmounts
   * @return healthcareAmounts
  **/
  @Schema(description = "")
  public HealthcareAmounts getHealthcareAmounts() {
    return healthcareAmounts;
  }

  public void setHealthcareAmounts(HealthcareAmounts healthcareAmounts) {
    this.healthcareAmounts = healthcareAmounts;
  }

  public PurchaseAuthorizationRequestAttributes paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @Schema(description = "")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public PurchaseAuthorizationRequestAttributes digitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

   /**
   * Get digitalWallet
   * @return digitalWallet
  **/
  @Schema(description = "")
  public String getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
  }

  public PurchaseAuthorizationRequestAttributes cardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
    return this;
  }

   /**
   * Get cardVerificationData
   * @return cardVerificationData
  **/
  @Schema(description = "")
  public CardVerificationData getCardVerificationData() {
    return cardVerificationData;
  }

  public void setCardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
  }

  public PurchaseAuthorizationRequestAttributes ecommerce(Boolean ecommerce) {
    this.ecommerce = ecommerce;
    return this;
  }

   /**
   * Get ecommerce
   * @return ecommerce
  **/
  @Schema(description = "")
  public Boolean isEcommerce() {
    return ecommerce;
  }

  public void setEcommerce(Boolean ecommerce) {
    this.ecommerce = ecommerce;
  }

  public PurchaseAuthorizationRequestAttributes cardPresent(Boolean cardPresent) {
    this.cardPresent = cardPresent;
    return this;
  }

   /**
   * Get cardPresent
   * @return cardPresent
  **/
  @Schema(description = "")
  public Boolean isCardPresent() {
    return cardPresent;
  }

  public void setCardPresent(Boolean cardPresent) {
    this.cardPresent = cardPresent;
  }

  public PurchaseAuthorizationRequestAttributes cardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @Schema(description = "")
  public String getCardNetwork() {
    return cardNetwork;
  }

  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }

  public PurchaseAuthorizationRequestAttributes cashWithdrawalAmount(Integer cashWithdrawalAmount) {
    this.cashWithdrawalAmount = cashWithdrawalAmount;
    return this;
  }

   /**
   * Get cashWithdrawalAmount
   * @return cashWithdrawalAmount
  **/
  @Schema(description = "")
  public Integer getCashWithdrawalAmount() {
    return cashWithdrawalAmount;
  }

  public void setCashWithdrawalAmount(Integer cashWithdrawalAmount) {
    this.cashWithdrawalAmount = cashWithdrawalAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseAuthorizationRequestAttributes purchaseAuthorizationRequestAttributes = (PurchaseAuthorizationRequestAttributes) o;
    return Objects.equals(this.createdAt, purchaseAuthorizationRequestAttributes.createdAt) &&
        Objects.equals(this.amount, purchaseAuthorizationRequestAttributes.amount) &&
        Objects.equals(this.status, purchaseAuthorizationRequestAttributes.status) &&
        Objects.equals(this.partialApprovalAllowed, purchaseAuthorizationRequestAttributes.partialApprovalAllowed) &&
        Objects.equals(this.approvedAmount, purchaseAuthorizationRequestAttributes.approvedAmount) &&
        Objects.equals(this.declineReason, purchaseAuthorizationRequestAttributes.declineReason) &&
        Objects.equals(this.merchant, purchaseAuthorizationRequestAttributes.merchant) &&
        Objects.equals(this.recurring, purchaseAuthorizationRequestAttributes.recurring) &&
        Objects.equals(this.tags, purchaseAuthorizationRequestAttributes.tags) &&
        Objects.equals(this.healthcareAmounts, purchaseAuthorizationRequestAttributes.healthcareAmounts) &&
        Objects.equals(this.paymentMethod, purchaseAuthorizationRequestAttributes.paymentMethod) &&
        Objects.equals(this.digitalWallet, purchaseAuthorizationRequestAttributes.digitalWallet) &&
        Objects.equals(this.cardVerificationData, purchaseAuthorizationRequestAttributes.cardVerificationData) &&
        Objects.equals(this.ecommerce, purchaseAuthorizationRequestAttributes.ecommerce) &&
        Objects.equals(this.cardPresent, purchaseAuthorizationRequestAttributes.cardPresent) &&
        Objects.equals(this.cardNetwork, purchaseAuthorizationRequestAttributes.cardNetwork) &&
        Objects.equals(this.cashWithdrawalAmount, purchaseAuthorizationRequestAttributes.cashWithdrawalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, amount, status, partialApprovalAllowed, approvedAmount, declineReason, merchant, recurring, tags, healthcareAmounts, paymentMethod, digitalWallet, cardVerificationData, ecommerce, cardPresent, cardNetwork, cashWithdrawalAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseAuthorizationRequestAttributes {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    partialApprovalAllowed: ").append(toIndentedString(partialApprovalAllowed)).append("\n");
    sb.append("    approvedAmount: ").append(toIndentedString(approvedAmount)).append("\n");
    sb.append("    declineReason: ").append(toIndentedString(declineReason)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    healthcareAmounts: ").append(toIndentedString(healthcareAmounts)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    cardVerificationData: ").append(toIndentedString(cardVerificationData)).append("\n");
    sb.append("    ecommerce: ").append(toIndentedString(ecommerce)).append("\n");
    sb.append("    cardPresent: ").append(toIndentedString(cardPresent)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("    cashWithdrawalAmount: ").append(toIndentedString(cashWithdrawalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
