/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Relationships12ReceivingAccount;
import io.swagger.client.model.Relationships2Customer;
import io.swagger.client.model.Relationships5Customer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Relationships12
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class Relationships12 {
  @SerializedName("receivingAccount")
  private Relationships12ReceivingAccount receivingAccount = null;

  @SerializedName("fundingAccount")
  private Relationships12ReceivingAccount fundingAccount = null;

  @SerializedName("customer")
  private Relationships5Customer customer = null;

  @SerializedName("rewardedTransaction")
  private Relationships2Customer rewardedTransaction = null;

  @SerializedName("transaction")
  private Relationships2Customer transaction = null;

  @SerializedName("card")
  private Relationships2Customer card = null;

  public Relationships12 receivingAccount(Relationships12ReceivingAccount receivingAccount) {
    this.receivingAccount = receivingAccount;
    return this;
  }

   /**
   * Get receivingAccount
   * @return receivingAccount
  **/
  @Schema(required = true, description = "")
  public Relationships12ReceivingAccount getReceivingAccount() {
    return receivingAccount;
  }

  public void setReceivingAccount(Relationships12ReceivingAccount receivingAccount) {
    this.receivingAccount = receivingAccount;
  }

  public Relationships12 fundingAccount(Relationships12ReceivingAccount fundingAccount) {
    this.fundingAccount = fundingAccount;
    return this;
  }

   /**
   * Get fundingAccount
   * @return fundingAccount
  **/
  @Schema(required = true, description = "")
  public Relationships12ReceivingAccount getFundingAccount() {
    return fundingAccount;
  }

  public void setFundingAccount(Relationships12ReceivingAccount fundingAccount) {
    this.fundingAccount = fundingAccount;
  }

  public Relationships12 customer(Relationships5Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @Schema(required = true, description = "")
  public Relationships5Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Relationships5Customer customer) {
    this.customer = customer;
  }

  public Relationships12 rewardedTransaction(Relationships2Customer rewardedTransaction) {
    this.rewardedTransaction = rewardedTransaction;
    return this;
  }

   /**
   * Get rewardedTransaction
   * @return rewardedTransaction
  **/
  @Schema(description = "")
  public Relationships2Customer getRewardedTransaction() {
    return rewardedTransaction;
  }

  public void setRewardedTransaction(Relationships2Customer rewardedTransaction) {
    this.rewardedTransaction = rewardedTransaction;
  }

  public Relationships12 transaction(Relationships2Customer transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @Schema(description = "")
  public Relationships2Customer getTransaction() {
    return transaction;
  }

  public void setTransaction(Relationships2Customer transaction) {
    this.transaction = transaction;
  }

  public Relationships12 card(Relationships2Customer card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @Schema(description = "")
  public Relationships2Customer getCard() {
    return card;
  }

  public void setCard(Relationships2Customer card) {
    this.card = card;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships12 relationships12 = (Relationships12) o;
    return Objects.equals(this.receivingAccount, relationships12.receivingAccount) &&
        Objects.equals(this.fundingAccount, relationships12.fundingAccount) &&
        Objects.equals(this.customer, relationships12.customer) &&
        Objects.equals(this.rewardedTransaction, relationships12.rewardedTransaction) &&
        Objects.equals(this.transaction, relationships12.transaction) &&
        Objects.equals(this.card, relationships12.card);
  }

  @Override
  public int hashCode() {
    return Objects.hash(receivingAccount, fundingAccount, customer, rewardedTransaction, transaction, card);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships12 {\n");
    
    sb.append("    receivingAccount: ").append(toIndentedString(receivingAccount)).append("\n");
    sb.append("    fundingAccount: ").append(toIndentedString(fundingAccount)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    rewardedTransaction: ").append(toIndentedString(rewardedTransaction)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
