/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CardVerificationData;
import io.swagger.client.model.Merchant;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * CardTransactionAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-26T12:59:56.018830800+03:00[Asia/Jerusalem]")
public class CardTransactionAttributes {
  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CREDIT("Credit"),
    DEBIT("Debit");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DirectionEnum fromValue(String input) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DirectionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("direction")
  private DirectionEnum direction = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("balance")
  private Integer balance = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("cardLast4Digits")
  private String cardLast4Digits = null;

  @SerializedName("tags")
  private Tags tags = null;

  @SerializedName("networkTransactionId")
  private String networkTransactionId = null;

  @SerializedName("interchange")
  private OneOfCardTransactionAttributesInterchange interchange = null;

  @SerializedName("internationalServiceFee")
  private OneOfCardTransactionAttributesInternationalServiceFee internationalServiceFee = null;

  @SerializedName("merchant")
  private Merchant merchant = null;

  @SerializedName("recurring")
  private Boolean recurring = null;

  @SerializedName("paymentMethod")
  private String paymentMethod = null;

  @SerializedName("digitalWallet")
  private String digitalWallet = null;

  @SerializedName("cardVerificationData")
  private CardVerificationData cardVerificationData = null;

  @SerializedName("cardNetwork")
  private String cardNetwork = null;

  public CardTransactionAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public CardTransactionAttributes direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @Schema(required = true, description = "")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public CardTransactionAttributes amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public CardTransactionAttributes balance(Integer balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @Schema(required = true, description = "")
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }

  public CardTransactionAttributes summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(required = true, description = "")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public CardTransactionAttributes cardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
    return this;
  }

   /**
   * Get cardLast4Digits
   * @return cardLast4Digits
  **/
  @Schema(required = true, description = "")
  public String getCardLast4Digits() {
    return cardLast4Digits;
  }

  public void setCardLast4Digits(String cardLast4Digits) {
    this.cardLast4Digits = cardLast4Digits;
  }

  public CardTransactionAttributes tags(Tags tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public Tags getTags() {
    return tags;
  }

  public void setTags(Tags tags) {
    this.tags = tags;
  }

  public CardTransactionAttributes networkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Get networkTransactionId
   * @return networkTransactionId
  **/
  @Schema(description = "")
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }

  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }

  public CardTransactionAttributes interchange(OneOfCardTransactionAttributesInterchange interchange) {
    this.interchange = interchange;
    return this;
  }

   /**
   * Get interchange
   * @return interchange
  **/
  @Schema(description = "")
  public OneOfCardTransactionAttributesInterchange getInterchange() {
    return interchange;
  }

  public void setInterchange(OneOfCardTransactionAttributesInterchange interchange) {
    this.interchange = interchange;
  }

  public CardTransactionAttributes internationalServiceFee(OneOfCardTransactionAttributesInternationalServiceFee internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
    return this;
  }

   /**
   * Get internationalServiceFee
   * @return internationalServiceFee
  **/
  @Schema(description = "")
  public OneOfCardTransactionAttributesInternationalServiceFee getInternationalServiceFee() {
    return internationalServiceFee;
  }

  public void setInternationalServiceFee(OneOfCardTransactionAttributesInternationalServiceFee internationalServiceFee) {
    this.internationalServiceFee = internationalServiceFee;
  }

  public CardTransactionAttributes merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @Schema(required = true, description = "")
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }

  public CardTransactionAttributes recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @Schema(required = true, description = "")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

  public CardTransactionAttributes paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @Schema(description = "")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public CardTransactionAttributes digitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

   /**
   * Get digitalWallet
   * @return digitalWallet
  **/
  @Schema(description = "")
  public String getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(String digitalWallet) {
    this.digitalWallet = digitalWallet;
  }

  public CardTransactionAttributes cardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
    return this;
  }

   /**
   * Get cardVerificationData
   * @return cardVerificationData
  **/
  @Schema(description = "")
  public CardVerificationData getCardVerificationData() {
    return cardVerificationData;
  }

  public void setCardVerificationData(CardVerificationData cardVerificationData) {
    this.cardVerificationData = cardVerificationData;
  }

  public CardTransactionAttributes cardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Get cardNetwork
   * @return cardNetwork
  **/
  @Schema(description = "")
  public String getCardNetwork() {
    return cardNetwork;
  }

  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransactionAttributes cardTransactionAttributes = (CardTransactionAttributes) o;
    return Objects.equals(this.createdAt, cardTransactionAttributes.createdAt) &&
        Objects.equals(this.direction, cardTransactionAttributes.direction) &&
        Objects.equals(this.amount, cardTransactionAttributes.amount) &&
        Objects.equals(this.balance, cardTransactionAttributes.balance) &&
        Objects.equals(this.summary, cardTransactionAttributes.summary) &&
        Objects.equals(this.cardLast4Digits, cardTransactionAttributes.cardLast4Digits) &&
        Objects.equals(this.tags, cardTransactionAttributes.tags) &&
        Objects.equals(this.networkTransactionId, cardTransactionAttributes.networkTransactionId) &&
        Objects.equals(this.interchange, cardTransactionAttributes.interchange) &&
        Objects.equals(this.internationalServiceFee, cardTransactionAttributes.internationalServiceFee) &&
        Objects.equals(this.merchant, cardTransactionAttributes.merchant) &&
        Objects.equals(this.recurring, cardTransactionAttributes.recurring) &&
        Objects.equals(this.paymentMethod, cardTransactionAttributes.paymentMethod) &&
        Objects.equals(this.digitalWallet, cardTransactionAttributes.digitalWallet) &&
        Objects.equals(this.cardVerificationData, cardTransactionAttributes.cardVerificationData) &&
        Objects.equals(this.cardNetwork, cardTransactionAttributes.cardNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, direction, amount, balance, summary, cardLast4Digits, tags, networkTransactionId, interchange, internationalServiceFee, merchant, recurring, paymentMethod, digitalWallet, cardVerificationData, cardNetwork);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransactionAttributes {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    cardLast4Digits: ").append(toIndentedString(cardLast4Digits)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    interchange: ").append(toIndentedString(interchange)).append("\n");
    sb.append("    internationalServiceFee: ").append(toIndentedString(internationalServiceFee)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    cardVerificationData: ").append(toIndentedString(cardVerificationData)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
