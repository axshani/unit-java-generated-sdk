/*
 * Unit Python SDK
 * An API for testing openapi-python-client for unit-sdk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(Transaction.class, new TypeSelector<Transaction>() {
            @Override
            public Class<? extends Transaction> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Transaction>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("originatedAchTransaction".toUpperCase(), OriginatedAchTransaction.class);
                    classByDiscriminatorValue.put("receivedAchTransaction".toUpperCase(), ReceivedAchTransaction.class);
                    classByDiscriminatorValue.put("returnedAchTransaction".toUpperCase(), ReturnedAchTransaction.class);
                    classByDiscriminatorValue.put("returnedReceivedAchTransaction".toUpperCase(), ReturnedReceivedAchTransaction.class);
                    classByDiscriminatorValue.put("dishonoredAchTransaction".toUpperCase(), DishonoredAchTransaction.class);
                    classByDiscriminatorValue.put("purchaseTransaction".toUpperCase(), PurchaseTransaction.class);
                    classByDiscriminatorValue.put("bookTransaction".toUpperCase(), BookTransaction.class);
                    classByDiscriminatorValue.put("atmTransaction".toUpperCase(), AtmTransaction.class);
                    classByDiscriminatorValue.put("feeTransaction".toUpperCase(), FeeTransaction.class);
                    classByDiscriminatorValue.put("reversalTransaction".toUpperCase(), ReversalTransaction.class);
                    classByDiscriminatorValue.put("cardTransaction".toUpperCase(), CardTransaction.class);
                    classByDiscriminatorValue.put("releaseTransaction".toUpperCase(), ReleaseTransaction.class);
                    classByDiscriminatorValue.put("wireTransaction".toUpperCase(), WireTransaction.class);
                    classByDiscriminatorValue.put("interchangeTransaction".toUpperCase(), InterchangeTransaction.class);
                    classByDiscriminatorValue.put("interestShareTransaction".toUpperCase(), InterestShareTransaction.class);
                    classByDiscriminatorValue.put("interestTransaction".toUpperCase(), InterestTransaction.class);
                    classByDiscriminatorValue.put("adjustmentTransaction".toUpperCase(), AdjustmentTransaction.class);
                    classByDiscriminatorValue.put("disputeSettlementTransaction".toUpperCase(), DisputeSettlementTransaction.class);
                    classByDiscriminatorValue.put("disputeTransaction".toUpperCase(), DisputeTransaction.class);
                    classByDiscriminatorValue.put("checkDepositTransaction".toUpperCase(), CheckDepositTransaction.class);
                    classByDiscriminatorValue.put("returnedCheckDepositTransaction".toUpperCase(), ReturnedCheckDepositTransaction.class);
                    classByDiscriminatorValue.put("billPayTransaction".toUpperCase(), BillPayTransaction.class);
                    classByDiscriminatorValue.put("settlementTransaction".toUpperCase(), SettlementTransaction.class);
                    classByDiscriminatorValue.put("sponsoredInterestTransaction".toUpperCase(), SponsoredInterestTransaction.class);
                    classByDiscriminatorValue.put("paymentAdvanceTransaction".toUpperCase(), PaymentAdvanceTransaction.class);
                    classByDiscriminatorValue.put("repaidPaymentAdvanceTransaction".toUpperCase(), RepaidPaymentAdvanceTransaction.class);
                    classByDiscriminatorValue.put("chargebackTransaction".toUpperCase(), ChargebackTransaction.class);
                    classByDiscriminatorValue.put("rewardTransaction".toUpperCase(), RewardTransaction.class);
                    classByDiscriminatorValue.put("negativeBalanceCoverageTransaction".toUpperCase(), NegativeBalanceCoverageTransaction.class);
                    classByDiscriminatorValue.put("accountLowBalanceClosureTransaction".toUpperCase(), AccountLowBalanceClosureTransaction.class);
                    classByDiscriminatorValue.put("bankRepaymentTransaction".toUpperCase(), BankRepaymentTransaction.class);
                    classByDiscriminatorValue.put("cashDepositTransaction".toUpperCase(), CashDepositTransaction.class);
                    classByDiscriminatorValue.put("customerRepaymentTransaction".toUpperCase(), CustomerRepaymentTransaction.class);
                    classByDiscriminatorValue.put("customerRepaymentReturnedTransaction".toUpperCase(), CustomerRepaymentReturnedTransaction.class);
                    classByDiscriminatorValue.put("checkPaymentTransaction".toUpperCase(), CheckPaymentTransaction.class);
                    classByDiscriminatorValue.put("returnedCheckPaymentTransaction".toUpperCase(), ReturnedCheckPaymentTransaction.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Transaction.class, new PostProcessor<Transaction>() {
              @Override
              public void postDeserialize(Transaction result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Transaction src, Gson gson) {
                  Map<Class<? extends Transaction>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(OriginatedAchTransaction.class, "originatedAchTransaction");
                      discriminatorValueByClass.put(ReceivedAchTransaction.class, "receivedAchTransaction");
                      discriminatorValueByClass.put(ReturnedAchTransaction.class, "returnedAchTransaction");
                      discriminatorValueByClass.put(ReturnedReceivedAchTransaction.class, "returnedReceivedAchTransaction");
                      discriminatorValueByClass.put(DishonoredAchTransaction.class, "dishonoredAchTransaction");
                      discriminatorValueByClass.put(PurchaseTransaction.class, "purchaseTransaction");
                      discriminatorValueByClass.put(BookTransaction.class, "bookTransaction");
                      discriminatorValueByClass.put(AtmTransaction.class, "atmTransaction");
                      discriminatorValueByClass.put(FeeTransaction.class, "feeTransaction");
                      discriminatorValueByClass.put(ReversalTransaction.class, "reversalTransaction");
                      discriminatorValueByClass.put(CardTransaction.class, "cardTransaction");
                      discriminatorValueByClass.put(ReleaseTransaction.class, "releaseTransaction");
                      discriminatorValueByClass.put(WireTransaction.class, "wireTransaction");
                      discriminatorValueByClass.put(InterchangeTransaction.class, "interchangeTransaction");
                      discriminatorValueByClass.put(InterestShareTransaction.class, "interestShareTransaction");
                      discriminatorValueByClass.put(InterestTransaction.class, "interestTransaction");
                      discriminatorValueByClass.put(AdjustmentTransaction.class, "adjustmentTransaction");
                      discriminatorValueByClass.put(DisputeSettlementTransaction.class, "disputeSettlementTransaction");
                      discriminatorValueByClass.put(DisputeTransaction.class, "disputeTransaction");
                      discriminatorValueByClass.put(CheckDepositTransaction.class, "checkDepositTransaction");
                      discriminatorValueByClass.put(ReturnedCheckDepositTransaction.class, "returnedCheckDepositTransaction");
                      discriminatorValueByClass.put(BillPayTransaction.class, "billPayTransaction");
                      discriminatorValueByClass.put(SettlementTransaction.class, "settlementTransaction");
                      discriminatorValueByClass.put(SponsoredInterestTransaction.class, "sponsoredInterestTransaction");
                      discriminatorValueByClass.put(PaymentAdvanceTransaction.class, "paymentAdvanceTransaction");
                      discriminatorValueByClass.put(RepaidPaymentAdvanceTransaction.class, "repaidPaymentAdvanceTransaction");
                      discriminatorValueByClass.put(ChargebackTransaction.class, "chargebackTransaction");
                      discriminatorValueByClass.put(RewardTransaction.class, "rewardTransaction");
                      discriminatorValueByClass.put(NegativeBalanceCoverageTransaction.class, "negativeBalanceCoverageTransaction");
                      discriminatorValueByClass.put(AccountLowBalanceClosureTransaction.class, "accountLowBalanceClosureTransaction");
                      discriminatorValueByClass.put(BankRepaymentTransaction.class, "bankRepaymentTransaction");
                      discriminatorValueByClass.put(CashDepositTransaction.class, "cashDepositTransaction");
                      discriminatorValueByClass.put(CustomerRepaymentTransaction.class, "customerRepaymentTransaction");
                      discriminatorValueByClass.put(CustomerRepaymentReturnedTransaction.class, "customerRepaymentReturnedTransaction");
                      discriminatorValueByClass.put(CheckPaymentTransaction.class, "checkPaymentTransaction");
                      discriminatorValueByClass.put(ReturnedCheckPaymentTransaction.class, "returnedCheckPaymentTransaction");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Payment.class, new TypeSelector<Payment>() {
            @Override
            public Class<? extends Payment> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Payment>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("achPayment".toUpperCase(), AchPayment.class);
                    classByDiscriminatorValue.put("bookPayment".toUpperCase(), BookPayment.class);
                    classByDiscriminatorValue.put("wirePayment".toUpperCase(), WirePayment.class);
                    classByDiscriminatorValue.put("billPayment".toUpperCase(), BillPayment.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Payment.class, new PostProcessor<Payment>() {
              @Override
              public void postDeserialize(Payment result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Payment src, Gson gson) {
                  Map<Class<? extends Payment>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AchPayment.class, "achPayment");
                      discriminatorValueByClass.put(BookPayment.class, "bookPayment");
                      discriminatorValueByClass.put(WirePayment.class, "wirePayment");
                      discriminatorValueByClass.put(BillPayment.class, "billPayment");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AuthorizationRequest.class, new TypeSelector<AuthorizationRequest>() {
            @Override
            public Class<? extends AuthorizationRequest> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuthorizationRequest>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("purchaseAuthorizationRequest".toUpperCase(), PurchaseAuthorizationRequest.class);
                    classByDiscriminatorValue.put("cardTransactionAuthorizationRequest".toUpperCase(), CardTransactionAuthorizationRequest.class);
                    classByDiscriminatorValue.put("atmAuthorizationRequest".toUpperCase(), AtmAuthorizationRequest.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(AuthorizationRequest.class, new PostProcessor<AuthorizationRequest>() {
              @Override
              public void postDeserialize(AuthorizationRequest result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuthorizationRequest src, Gson gson) {
                  Map<Class<? extends AuthorizationRequest>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(PurchaseAuthorizationRequest.class, "purchaseAuthorizationRequest");
                      discriminatorValueByClass.put(CardTransactionAuthorizationRequest.class, "cardTransactionAuthorizationRequest");
                      discriminatorValueByClass.put(AtmAuthorizationRequest.class, "atmAuthorizationRequest");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Application.class, new TypeSelector<Application>() {
            @Override
            public Class<? extends Application> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Application>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("individualApplication".toUpperCase(), IndividualApplication.class);
                    classByDiscriminatorValue.put("businessApplication".toUpperCase(), BusinessApplication.class);
                    classByDiscriminatorValue.put("trustApplication".toUpperCase(), TrustApplication.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Application.class, new PostProcessor<Application>() {
              @Override
              public void postDeserialize(Application result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Application src, Gson gson) {
                  Map<Class<? extends Application>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IndividualApplication.class, "individualApplication");
                      discriminatorValueByClass.put(BusinessApplication.class, "businessApplication");
                      discriminatorValueByClass.put(TrustApplication.class, "trustApplication");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Card.class, new TypeSelector<Card>() {
            @Override
            public Class<? extends Card> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Card>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("businessDebitCard".toUpperCase(), BusinessDebitCard.class);
                    classByDiscriminatorValue.put("individualDebitCard".toUpperCase(), IndividualDebitCard.class);
                    classByDiscriminatorValue.put("businessVirtualDebitCard".toUpperCase(), BusinessVirtualDebitCard.class);
                    classByDiscriminatorValue.put("individualVirtualDebitCard".toUpperCase(), IndividualVirtualDebitCard.class);
                    classByDiscriminatorValue.put("businessCreditCard".toUpperCase(), BusinessCreditCard.class);
                    classByDiscriminatorValue.put("businessVirtualCreditCard".toUpperCase(), BusinessVirtualCreditCard.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Card.class, new PostProcessor<Card>() {
              @Override
              public void postDeserialize(Card result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Card src, Gson gson) {
                  Map<Class<? extends Card>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(BusinessDebitCard.class, "businessDebitCard");
                      discriminatorValueByClass.put(IndividualDebitCard.class, "individualDebitCard");
                      discriminatorValueByClass.put(BusinessVirtualDebitCard.class, "businessVirtualDebitCard");
                      discriminatorValueByClass.put(IndividualVirtualDebitCard.class, "individualVirtualDebitCard");
                      discriminatorValueByClass.put(BusinessCreditCard.class, "businessCreditCard");
                      discriminatorValueByClass.put(BusinessVirtualCreditCard.class, "businessVirtualCreditCard");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Customer.class, new TypeSelector<Customer>() {
            @Override
            public Class<? extends Customer> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Customer>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("individualCustomer".toUpperCase(), IndividualCustomer.class);
                    classByDiscriminatorValue.put("businessCustomer".toUpperCase(), BusinessCustomer.class);
                    classByDiscriminatorValue.put("trustCustomer".toUpperCase(), TrustCustomer.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Customer.class, new PostProcessor<Customer>() {
              @Override
              public void postDeserialize(Customer result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Customer src, Gson gson) {
                  Map<Class<? extends Customer>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(IndividualCustomer.class, "individualCustomer");
                      discriminatorValueByClass.put(BusinessCustomer.class, "businessCustomer");
                      discriminatorValueByClass.put(TrustCustomer.class, "trustCustomer");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Account.class, new TypeSelector<Account>() {
            @Override
            public Class<? extends Account> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Account>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("depositAccount".toUpperCase(), DepositAccount.class);
                    classByDiscriminatorValue.put("creditAccount".toUpperCase(), CreditAccount.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Account.class, new PostProcessor<Account>() {
              @Override
              public void postDeserialize(Account result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Account src, Gson gson) {
                  Map<Class<? extends Account>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DepositAccount.class, "depositAccount");
                      discriminatorValueByClass.put(CreditAccount.class, "creditAccount");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Limits1.class, new TypeSelector<Limits1>() {
            @Override
            public Class<? extends Limits1> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Limits1>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("limits".toUpperCase(), DepositLimits.class);
                    classByDiscriminatorValue.put("creditLimits".toUpperCase(), CreditLimits.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(Limits1.class, new PostProcessor<Limits1>() {
              @Override
              public void postDeserialize(Limits1 result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Limits1 src, Gson gson) {
                  Map<Class<? extends Limits1>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DepositLimits.class, "limits");
                      discriminatorValueByClass.put(CreditLimits.class, "creditLimits");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(RecurringPayment.class, new TypeSelector<RecurringPayment>() {
            @Override
            public Class<? extends RecurringPayment> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends RecurringPayment>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("recurringCreditAchPayment".toUpperCase(), RecurringCreditAchPayment.class);
                    classByDiscriminatorValue.put("recurringDebitAchPayment".toUpperCase(), RecurringDebitAchPayment.class);
                    classByDiscriminatorValue.put("recurringCreditBookPayment".toUpperCase(), RecurringCreditBookPayment.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerPostProcessor(RecurringPayment.class, new PostProcessor<RecurringPayment>() {
              @Override
              public void postDeserialize(RecurringPayment result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, RecurringPayment src, Gson gson) {
                  Map<Class<? extends RecurringPayment>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(RecurringCreditAchPayment.class, "recurringCreditAchPayment");
                      discriminatorValueByClass.put(RecurringDebitAchPayment.class, "recurringDebitAchPayment");
                      discriminatorValueByClass.put(RecurringCreditBookPayment.class, "recurringCreditBookPayment");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("type"))
                      {
                          ((JsonObject) result).addProperty("type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
